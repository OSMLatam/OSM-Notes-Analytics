#!/bin/bash

# Pre-commit hook for OSM-Notes-Analytics
# Runs quality checks before allowing commit
#
# To install: ln -sf ../../.git-hooks/pre-commit .git/hooks/pre-commit

set -e

echo "üîç Running pre-commit checks..."
echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get list of staged shell scripts
STAGED_SH_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.sh$' || true)

if [ -z "$STAGED_SH_FILES" ]; then
    echo "‚ÑπÔ∏è  No shell scripts staged for commit"
    exit 0
fi

echo "üìù Found staged shell scripts:"
echo "$STAGED_SH_FILES"
echo ""

# Check 1: Shellcheck
if command -v shellcheck &> /dev/null; then
    echo "üîç Running shellcheck..."
    SHELLCHECK_FAILED=0
    
    for file in $STAGED_SH_FILES; do
        if [ -f "$file" ]; then
            if ! shellcheck -x "$file"; then
                SHELLCHECK_FAILED=1
                echo -e "${RED}‚ùå Shellcheck failed for: $file${NC}"
            fi
        fi
    done
    
    if [ $SHELLCHECK_FAILED -eq 1 ]; then
        echo -e "${RED}‚ùå Shellcheck found issues. Please fix them before committing.${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Shellcheck passed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Shellcheck not installed, skipping...${NC}"
fi

echo ""

# Check 2: Shfmt (formatting)
if command -v shfmt &> /dev/null; then
    echo "üîç Checking code formatting..."
    SHFMT_FAILED=0
    
    for file in $STAGED_SH_FILES; do
        if [ -f "$file" ]; then
            if ! shfmt -d -i 1 -sr -bn "$file" > /dev/null 2>&1; then
                SHFMT_FAILED=1
                echo -e "${RED}‚ùå Format check failed for: $file${NC}"
                echo "   Run: shfmt -w -i 1 -sr -bn $file"
            fi
        fi
    done
    
    if [ $SHFMT_FAILED -eq 1 ]; then
        echo -e "${RED}‚ùå Format check failed. Run shfmt to fix formatting.${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Format check passed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Shfmt not installed, skipping...${NC}"
fi

echo ""

# Check 3: Trailing whitespace
echo "üîç Checking for trailing whitespace..."
TRAILING_WS_FAILED=0

for file in $STAGED_SH_FILES; do
    if [ -f "$file" ]; then
        if grep -n ' $' "$file" > /dev/null 2>&1; then
            TRAILING_WS_FAILED=1
            echo -e "${RED}‚ùå Trailing whitespace found in: $file${NC}"
            echo "   Run: sed -i 's/[[:space:]]*$//' $file"
        fi
    fi
done

if [ $TRAILING_WS_FAILED -eq 1 ]; then
    echo -e "${RED}‚ùå Trailing whitespace found. Please remove it.${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ No trailing whitespace${NC}"

echo ""

# Check 4: Shebang
echo "üîç Checking shebangs..."
SHEBANG_FAILED=0

for file in $STAGED_SH_FILES; do
    if [ -f "$file" ]; then
        FIRST_LINE=$(head -1 "$file")
        if [[ "$FIRST_LINE" != "#!/bin/bash"* ]] && [[ "$FIRST_LINE" != "#!/usr/bin/env bash"* ]]; then
            SHEBANG_FAILED=1
            echo -e "${RED}‚ùå Invalid or missing shebang in: $file${NC}"
            echo "   First line: $FIRST_LINE"
        fi
    fi
done

if [ $SHEBANG_FAILED -eq 1 ]; then
    echo -e "${RED}‚ùå Shebang check failed.${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Shebangs OK${NC}"

echo ""
echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo ""

exit 0

